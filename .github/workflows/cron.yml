#
# cron.yml
# Use this workflow to run Drupal cron on a schedule.
#
name: Cron
on:
  # Allows running cron manually.
  workflow_dispatch:

  # Runs this workflow on a schedule.
  schedule:

    # Every hour at 45 minutes after.
    # GitHub recommends NOT running cronjobs at :00 due to overall system load.
    - cron: '45 * * * *'

env:
  # The relative path to run this workflow. Make sure it matches the path in deploy.yml
  # For available values, see https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
  DDEV_PROJECT_PATH: Sites/${{ github.repository }}/live

jobs:
  cron:
    name: Drupal Cron

    # The label of the runner you wish to use.
    # Operations Site Server automatically adds the server's hostname as a label.
    # Use the hostname label to be sure the workflow runs on the right server.
    runs-on: prod.myserver.com
    steps:

      # Find absolute path to the site using the runner's home directory.
      # This frees us from having to add the absolute path of the runner to this file.
      - name: Detect project path
        run: |
          echo "DDEV_PROJECT_PATH_FULL=$HOME/$DDEV_PROJECT_PATH" >> "$GITHUB_ENV"

      # Run drush cron.
      - name: Run cron
        working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
        run: |
          ddev drush cron -v
          ddev drush status

  # If desired, you can add additional things like a backup job.
  backup:
    name: Backup site
    runs-on: prod.myserver.com
    steps:

      # Find absolute path to the site using the runner's home directory.
      # This frees us from having to add the absolute path of the runner to this file.
      - name: Detect project path
        run: |
          echo "DDEV_PROJECT_PATH_FULL=$HOME/$DDEV_PROJECT_PATH" >> "$GITHUB_ENV"

      - name: Archive site data
        working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
        run: |
          ddev drush archive:dump --destination=~/backups/live.latest.tar.gz
          
