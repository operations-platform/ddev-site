name: 'Launch a site with DDEV'
description: 'Launches a new site using DDEV.'
inputs:
  ddev-project-name:
    description: "The DDEV project name to use for this environment. Will be used in the URL."
    required: false
    default: "${{ github.event.repository.name }}.pr${{ github.event.number }}"

  ddev-project-tld:
    description: "The DDEV project's project_tld. If not specified, the global DDEV project_tld will be used."
    required: false

  ddev-fqdns:
    description: "A list of domains to apply to this environment. Must be a string because of github actions."
    required: false

  git-reference:
    description: "The git reference to checkout."
    required: false
    default: ${{ github.head_ref }}

  path:
    description: "Path to clone this environment's code to, relative to the runner's home directory."
    required: false
    default: "Sites/${{ github.repository }}/pr${{ github.event.number }}"

  sync:
    description: "If set to 'yes'', the environment will be destroyed and replaced with data using the 'sync-command' input."
    required: false
    default: "no"

  composer-install-command:
    description: "The command to run to prepare the codebase"
    required: false
    default: "ddev composer install --ansi"

  sync-command:
    description: "The command to run to sync the sites data. Override if source is not the @live drush alias or sql:sync command does not work for you."
    required: false
    default: "ddev drush sql:sync @live @self"

  update-command:
    description: "The command to run to update the sites data."
    required: false
    default: "ddev drush updatedb"

  ssh-known-hosts:
    description: "SSH Known Hosts"
    required: false

  ssh-private-key:
    description: "SSH private key to use to access remote servers."
    required: false

runs:
  using: "composite"
  steps:

    - name: Set environment
      shell: bash
      run: |
        echo "DDEV_PROJECT_PATH_FULL=$HOME/${{ inputs.path }}" >> "$GITHUB_ENV"

    - name: Prepare Code
      shell: bash
      # Must exist. If not yet cloned,  ${{env.DDEV_PROJECT_PATH}} directory will not exist.
      working-directory: "/"
      run: |
        if [[ ! -d ${{ env.DDEV_PROJECT_PATH_FULL }} ]]; then
          git clone git@github.com:${{ github.repository }} ${{env.DDEV_PROJECT_PATH_FULL}}
        else
          echo "Git clone exists at ${{env.DDEV_PROJECT_PATH_FULL}}"
        fi
        cd ${{env.DDEV_PROJECT_PATH_FULL}}
        echo "Current Directory: $(pwd)"
        echo "Pre-deployment git status: $(git status)"
        git fetch
        git checkout ${{ inputs.git-reference }}
        git reset --hard origin/${{ inputs.git-reference }}
        echo "Post deployment git status: $(git status)"
        echo "name: ${{ inputs.ddev-project-name }}" > .ddev/config.z.yml
        if [[ -n "${{ inputs.ddev-project-tld }}" ]]; then
          echo "project_tld: ${{ inputs.ddev-project-tld }}" >> .ddev/config.z.yml
        fi
        if [[ -n "${{ inputs.ddev-fqdns }}" ]]; then
          echo "additional_fqdns: ${{ inputs.ddev-fqdns }}" >> .ddev/config.z.yml
        fi

    # Secrets: https://github.com/thinkdrop/thinkdrop.net/settings/secrets/actions
    # To retrieve SSH_KNOWN_HOSTS string:
    #       ssh-keyscan -H liveserver.com -H github.com -H otherserver.com

    # Removing DDEV is needed if the database changes.
    - name: Start DDEV
      shell: bash
      working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
      run: |
        ddev rm -OR
        ddev start

    - name: Grant DDEV SSH Access
      shell: bash
      working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
      run: |
        echo "${{ inputs.ssh-private-key }}" > ddev_id_rsa
        ddev exec 'cat ddev_id_rsa > ~/.ssh/id_rsa'
        ddev exec 'chmod 600 ~/.ssh/id_rsa'
        if [ "${{ inputs.ssh-known-hosts }}" != "" ]; then
          ddev exec 'echo "${{ inputs.ssh-known-hosts }}" > ~/.ssh/known_hosts'
        fi

    - name: Composer Install
      shell: bash
      working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
      run: |
        ${{ inputs.composer-install-command }}

    - name: Sync
      if: ${{ inputs.sync == 'yes' }}
      shell: bash
      working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
      run: |
        ${{ inputs.sync-command }}

    - name: Drupal Database Updates
      shell: bash
      working-directory: ${{ env.DDEV_PROJECT_PATH_FULL }}
      run: |
        ${{ inputs.update-command }}

